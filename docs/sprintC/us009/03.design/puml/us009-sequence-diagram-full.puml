@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Client" as User
participant ":ScheduleVisitUI" as System
participant ":ScheduleVisitController" as Controller
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as repositories
participant "publishedAnnouncementsRepository\n:PublishedAnnouncementsRepository" as PropertyRepository
participant ":userRepository\nUserRepository" as UserRepository
participant "messageRepository\n:MessageRepository" as Message



activate User


User->System: asks to schedule a visit to a property.
activate System


System->Controller**: create

activate Controller

Controller->RepositorySingleton: getInstance()
activate RepositorySingleton

RepositorySingleton-->Controller: repositories
deactivate RepositorySingleton

Controller -> repositories : getListOfProperties()
activate repositories

repositories --> Controller: ListOfProperties
deactivate repositories

Controller -> PropertyRepository : getSortedProperties()
activate PropertyRepository

PropertyRepository --> Controller : ListOfPropertiesSorted
deactivate PropertyRepository
loop while true

Controller --> System : ListOfPropertiesSorted





deactivate Controller

System --> User : show a list of properties sorted from the most recent entries to the oldest
deactivate System



User -> System : Select the property
activate System

System --> User : request data (preferred date and \ntime slot (from x hour to y hour) for the property visit)
deactivate System

User -> System : types requested data
activate System


System -> Controller: getUser()
activate Controller

Controller -> UserRepository: getUser()
activate UserRepository

UserRepository --> Controller: User
deactivate UserRepository

System->Controller: User
deactivate Controller

System -> System : save phoneNumber and name

System -> Controller : checkIfValid()
activate Controller

Controller -> Message : checkIfValid()
activate Message

Message --> Controller: return boolean
deactivate Message

Controller --> System: return boolean
deactivate Controller


alt if true

System -> Controller: addMessage()
activate Controller

Controller -> Message: addMessage()
activate Message


System -> User: show sucess of operation

end
alt if false




System -> User: show insucess of operation


end

System -> User: Show message: "Want to try more?"
end



@enduml