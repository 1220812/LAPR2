@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Client" as User
participant ":ScheduleVisitUI" as UI
participant ":ScheduleVisitController" as Controller
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as repositories
participant "announcementsRepository\n:AnnouncementsRepository" as AnnoucementRepository
participant "messageRepository\n:MessageRepository" as MessageRepo



activate User


User->UI: asks to schedule a visit to a property.
activate UI


UI->Controller**: create

activate Controller

Controller->RepositorySingleton: getInstance()
activate RepositorySingleton

RepositorySingleton-->Controller: repositories
deactivate RepositorySingleton

Controller -> MessageRepo : getMessageRepository()
activate MessageRepo

MessageRepo--> Controller : messageRepository
deactivate MessageRepo

Controller -> AnnoucementRepository : getAnnouncementRepository()
activate AnnoucementRepository

AnnoucementRepository--> Controller : announcementRepository
deactivate AnnoucementRepository

deactivate Controller






UI --> User : Requests data (name and phoneNumber)
deactivate UI

User -> UI : Types request data (name and phoneNumber)
activate UI

UI-> UI : keepName(name)

UI -> UI : keepPhone(phoneNumber)

loop while option selected is yes

UI -> Controller : getAnnouncement()
activate Controller

Controller -> repositories : getAnnouncement()
activate repositories

repositories -> AnnoucementRepository : getAnnouncement()
activate AnnoucementRepository

AnnoucementRepository --> repositories : announcementsList
deactivate AnnoucementRepository

repositories --> Controller : announcementsList
deactivate repositories

Controller --> UI : announcementsList
deactivate Controller

 UI --> User : show a list of properties sorted from the most recent entries to the oldest
deactivate UI

User -> UI : Select the property
activate UI

UI->UI : keepProperty(inputAnnou)


loop while NewVisitStartTime and NewVisitEndTime is invalid
UI --> User : request data(day, month, year, startHour, StartMinute, EndHour, EndMinute)
deactivate UI

User -> UI : Types requested date
activate UI

UI ->Controller : checkDay(day)
activate Controller



Controller ->Message : checkDay(day)
activate Message

Message --> Controller : day
deactivate Message

Controller --> UI :day
deactivate Controller

UI -> UI : keepDay(day)

UI ->Controller : checkMonth(month)
activate Controller

Controller ->Message : checkMonth(month)
activate Message

Message --> Controller : month
deactivate Message

Controller --> UI :month
deactivate Controller

UI -> UI : keepMonth(month)

UI ->Controller : checkYear(year)
activate Controller

Controller ->Message : checkYear(year)
activate Message

Message --> Controller : year
deactivate Message

Controller --> UI :year
deactivate Controller

UI -> UI : keepYear(year)

UI ->Controller : checkHour(startHour)
activate Controller

Controller ->Message : checkHour(startHour)
activate Message

Message --> Controller : startHour
deactivate Message

Controller --> UI :startHour
deactivate Controller

UI -> UI : keepStartHour(startHour)

UI ->Controller : checkMinutes(startMinute)
activate Controller

Controller ->Message : checkMinutes(startMinute)
activate Message

Message --> Controller :startMinute
deactivate Message

Controller --> UI :startMinute
deactivate Controller

UI -> UI : keepStartHour(startMinute)

UI ->Controller : checkHour(endHour)
activate Controller

Controller ->Message : checkHour(endtHour)
activate Message

Message --> Controller : endHour
deactivate Message

Controller --> UI :endHour
deactivate Controller

UI -> UI : keepStartHour(endHour)

UI ->Controller : checkMinutes(endMinute)
activate Controller

Controller ->Message : checkMinutes(endMinute)
activate Message

Message --> Controller :endMinute
deactivate Message

Controller --> UI :endMinute
deactivate Controller

UI -> UI : newVisitStartTime = \nLocalDateTime.of(year, month, day, startHour, startMinute)

UI -> UI : newVisitEndTime = \nLocalDateTime.of(year, month, day, startHour, startMinute)

end

UI -> UI : keepNewVisitStartTime(newVisitStartTime)
UI -> UI : keepNewVisitEndTime(newVisitEndTime)


UI -> Controller : hasOverlap = checkIfValidVisit(MessageList, newVisitStartTime, newVisitEndTime)
activate Controller

Controller -> Message :checkIfValidVisit(MessageList, newVisitStartTime, newVisitEndTime);
activate Message

Message --> Controller : boolean
deactivate Message

Controller --> UI : boolean
deactivate Controller

alt if hasOverlap = true (overlapping schedule)
UI -> User: Show message:"There is overlapping schedule."

deactivate Message
deactivate Controller
end
alt if hasOverlap = false (no overlapping schedule.)
UI -> User: Show message:"There is no overlapping of visits"

User -> UI : Send message

UI -> Controller: addMessage(name, phone, inputAnnou, newVisitStartTime, newVisitEndTime)
deactivate UI

activate Controller
Controller -> MessageRepo : addMessage(name, phone, inputAnnou, newVisitStartTime, newVisitEndTime)

activate MessageRepo
MessageRepo -> MessageRepo :addComplete(message)

MessageRepo --> Controller :messageList
deactivate MessageRepo

Controller --> UI : messageList
deactivate Controller

activate UI
UI -> User : successful operation


end

UI -> User: Show message: "Want to try more?"
alt
User -> UI : Types yes
end
end
alt
User -> UI :Types no
UI ->User:Show message: "End of Operation"
end



@enduml