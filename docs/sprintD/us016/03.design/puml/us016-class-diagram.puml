 @startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class RespondBookingRequestUI{
}

class RespondBookingRequestController{
-List<Message> getListOfBookingRequestByAgent(Agent agent)
+getCurrentAgent()
+getCurrentSession()
+getClientEmail(Message message)
+getAgentEmail(Agent agent)
+getAgentName(Agent agent)
+getAgentPhone(Agent agent)
+getAnnouncement(Message message)
+getPropertyType(Announcement announcement)
+getAddress(Announcement announcement)
+replyMessage(Message message)
}


class Repositories{
-AnnouncementRepository announcementRepository;
-MessageRepository messageRepository;
+getAnnouncementRepository();
+getMessageRepository();
+getInstance();
}

class Message{
-boolean CheckVisitTime;
-boolean checkDay;
-boolean checkMonth;
-boolean checkYear;
-boolean checkHour;
-boolean checkIfValidVisit;
+getNewVisitStartTime();
+setNewVisitStartTime(LocalDateTime newVisitStartTime);
+getNewVisitEndTime();
+setNewVisitEndTime(LocalDateTime newVisitEndTime);
+getPhone();
+setPhone(int phone);
+getAnnouncement();
+setAnnouncement(Announcement announcement);
+getAgent();
+getClient();
}


class MessageRepository{
-boolean add;
-boolean addComplete;
-List<Message> getMessageList();
-Message addMessage;
-Message removeMessage;
-List<Message> getMessageSorted;
+getRequestAssignedList(Agent agent);
+getClient(Message message);
+getAnnouncement (Message message);
}

class Agent {
-Strind name;
-String phoneNumber;
-StringEmailAddress;
-TaxNumber taxNumber;
-PassportCardNumber passportCardNumber;
-Address address;
-Role role;
-Agency agency;
-Store store;
}



RespondBookingRequestUI ..> RespondBookingRequestController
RespondBookingRequestController ..> Repositories : repositories
Repositories --> MessageRepository : has a

Agent --> Message: sends a
MessageRepository --> "1" Message


@enduml