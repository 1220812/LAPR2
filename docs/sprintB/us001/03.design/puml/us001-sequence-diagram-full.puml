@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Unregistered User" as User
participant ":DisplayPropertiesUI" as System
participant ":DisplayPropertiesController" as Controller
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as repositories
participant "announcementsRepository\n:AnnouncementsRepository" as PropertyRepository
participant "PublishedAnnouncement" as announcement
participant "Property" as property
participant "Comparator" as comparator
participant "City" as city
participant "State" as state



activate User


User->System: asks to display list of properties
activate System


System->Controller**: create

System->Controller: getAnnouncements()
activate Controller

Controller->RepositorySingleton: getInstance()
activate RepositorySingleton

RepositorySingleton-->Controller: repositories
deactivate RepositorySingleton

Controller -> repositories : getAnnouncementsRepository()
activate repositories

repositories --> Controller: announcementsRepository
deactivate repositories

Controller -> PropertyRepository : getAnnouncements()
activate PropertyRepository

PropertyRepository --> Controller : announcementsList
deactivate PropertyRepository

Controller --> System : announcementsList
deactivate Controller

System --> User : displays list of properties sorted by most\nrecently added and asks the user if they want to \nsearch for properties with specific characteristics \nor select a sorting option
deactivate System

opt property data is specified by the user

User -> System : asks to display properties with the specific characteristics
activate System

System --> User : asks to specify the characteristics
deactivate System

User -> System : selects (type of business, type of property)\nand types in (number of rooms).
activate System

System->Controller: displayProperties(number of rooms,\ntype of business,\ntype of property)
activate Controller

Controller->RepositorySingleton: getInstance()
activate RepositorySingleton

RepositorySingleton-->Controller: repositories
deactivate RepositorySingleton

Controller -> repositories : getAnnouncementsRepository()
activate repositories

repositories --> Controller: announcementsRepository
deactivate repositories

Controller -> PropertyRepository : displayProperties(number of rooms, type of business, type of property)
activate PropertyRepository

loop for each announcement

PropertyRepository -> announcement : getAnnouncementByCharacteristics(number of rooms, type of business, type of property)
activate announcement

announcement -> property : getPropertyByCharacteristics(number of rooms, type of business, type of property)
activate property

property --> announcement : property
deactivate property

announcement --> PropertyRepository : announcement
deactivate announcement

end

PropertyRepository --> Controller : announcementsList
deactivate PropertyRepository

Controller --> System : announcementsList
deactivate Controller

System --> User : displays list of properties with the specific data \nsorted by most recently added (by default) and asks \nwhat sorting option the user wants to select
deactivate System

end


User -> System : sorts properties by price/city/state (ascending or descending).
activate System


alt In case the option is price (ascending or descending)

System -> Controller: sortPropertiesPrice()
activate Controller

Controller->RepositorySingleton: getInstance()
activate RepositorySingleton

RepositorySingleton-->Controller: repositories
deactivate RepositorySingleton

Controller -> repositories : getAnnouncementsRepository()
activate repositories

repositories --> Controller: announcementsRepository
deactivate repositories

alt In case the chosen option is price (ascending order)

Controller -> PropertyRepository: sortPropertiesByPriceAscending()
activate PropertyRepository



PropertyRepository -> announcement: sortPropertiesByPriceAscending()
activate announcement

loop

announcement -> property: getProperty()
activate property

property -> property: getPrice()

property --> announcement: property
deactivate property

announcement -> comparator: compare(announcement1, announcement2)
activate comparator

comparator-->announcement: comparisonResult
deactivate comparator

end

announcement-->PropertyRepository: announcementsListByPriceAscending
deactivate announcement

PropertyRepository-->Controller: announcementsListByPriceAscending
deactivate PropertyRepository




else In case the chosen option is price (descending order)

Controller -> PropertyRepository: sortPropertiesByPriceDescending()
activate PropertyRepository

PropertyRepository -> announcement: sortPropertiesByPriceDescending()
activate announcement

loop

announcement -> property: getProperty()
activate property

property -> property: getPrice()

property --> announcement: property
deactivate property

announcement -> comparator: compare(announcement1, announcement2)
activate comparator

comparator-->announcement: comparisonResult
deactivate comparator

end

announcement-->PropertyRepository: announcementsListByPriceDescending
deactivate announcement

PropertyRepository-->Controller: announcementsListByPriceDescending
deactivate PropertyRepository

end

Controller-->System: announcementsListByPrice
deactivate Controller


else In case the option is city (ascending or descending)

System -> Controller: sortPropertiesCity()
activate Controller

Controller->RepositorySingleton: getInstance()
activate RepositorySingleton

RepositorySingleton-->Controller: repositories
deactivate RepositorySingleton

Controller -> repositories : getAnnouncementsRepository()
activate repositories

repositories --> Controller: announcementsRepository
deactivate repositories

alt In case the chosen option is city (ascending order)

Controller -> PropertyRepository: sortPropertiesByCityAscending(price)
activate PropertyRepository

PropertyRepository -> announcement: sortPropertiesByCityAscending()
activate announcement

loop

announcement -> property: getProperty()
activate property

property -> city: getCity()
activate city

city-->property: cityName
deactivate city

property -> state: getState()
activate state

state-->property: stateName
deactivate state

property --> announcement: property
deactivate property

announcement -> comparator: compare(announcement1, announcement2)
activate comparator

comparator-->announcement: comparisonResult
deactivate comparator

end

announcement-->PropertyRepository: announcementsListByCityAscending
deactivate announcement

PropertyRepository-->Controller: announcementsListByCityAscending
deactivate PropertyRepository


else In case the chosen option is city name (descending order)

Controller -> PropertyRepository: sortPropertiesByCityDescending()
activate PropertyRepository

PropertyRepository -> announcement: sortPropertiesByCityDescending()
activate announcement

loop

announcement -> property: getProperty()
activate property

property -> city: getCity()
activate city

city-->property: cityName
deactivate city

property -> state: getState()
activate state

state-->property: stateName
deactivate state

property --> announcement: property
deactivate property

announcement -> comparator: compare(announcement1, announcement2)
activate comparator

comparator-->announcement: comparisonResult
deactivate comparator

end

announcement-->PropertyRepository: announcementsListByCityDescending
deactivate announcement

PropertyRepository-->Controller: announcementsListByCityDescending
deactivate PropertyRepository

end

Controller-->System: announcementsListByCity
deactivate Controller



else In case the option is state (ascending or descending)

System -> Controller: sortPropertiesState()
activate Controller

Controller->RepositorySingleton: getInstance()
activate RepositorySingleton

RepositorySingleton-->Controller: repositories
deactivate RepositorySingleton

Controller -> repositories : getAnnouncementsRepository()
activate repositories

repositories --> Controller: announcementsRepository
deactivate repositories


alt In case the chosen option is state (ascending order)

Controller -> PropertyRepository: sortPropertiesByStateAscending()
activate PropertyRepository

PropertyRepository -> announcement: sortPropertiesByStateAscending()
activate announcement

loop

announcement -> property: getProperty()
activate property

property -> state: getState()
activate state

state-->property: stateName
deactivate state

property --> announcement: property
deactivate property

announcement -> comparator: compare(announcement1, announcement2)
activate comparator

comparator-->announcement: comparisonResult
deactivate comparator

end

announcement-->PropertyRepository: announcementsListByStateAscending
deactivate announcement

PropertyRepository-->Controller: announcementsListByStateAscending
deactivate PropertyRepository


else In case the chosen option is state (descending order)

Controller -> PropertyRepository: sortPropertiesByStateDescending()
activate PropertyRepository

PropertyRepository -> announcement: sortPropertiesByStateDescending()
activate announcement

loop

announcement -> property: getProperty()
activate property

property -> state: getState()
activate state

state-->property: stateName
deactivate state

property --> announcement: property
deactivate property

announcement -> comparator: compare(announcement1, announcement2)
activate comparator

comparator-->announcement: comparisonResult
deactivate comparator

end

announcement-->PropertyRepository: announcementsListByStateDescending
deactivate announcement

PropertyRepository-->Controller: announcementsListByStateDescending
deactivate PropertyRepository


end

Controller-->System: announcementsListByState
deactivate Controller


end

System --> User : displays a list of the properties sorted by the sorting \noption chosen by the user.
deactivate System



@enduml